<analysis>
The trajectory details the development of a crypto-analysis application, initially named CryptoTrendHunter and later rebranded to Crypto Oracle. The process began with a user request for a multi-bot AI agent to provide trade recommendations. The AI engineer built the full-stack MVP using FastAPI, React, and MongoDB, integrating Claude for data analysis.

Initial development involved creating a complex backend with 20 distinct bot strategies, data indicator engines, and API clients. The frontend was built with Shadcn UI for a modern look. The MVP completion was followed by several iterative cycles of feature enhancement and bug fixing.

Key challenges encountered were significant. The primary data source proved unreliable, forcing a pivot from the user-specified Coinalyze API to CoinGecko, which then suffered from rate-limiting issues. This led to a final strategic shift to the Binance API for both coin lists and historical data. Debugging was also a major theme, with recurring issues like silent background task failures (requiring enhanced logging), MongoDB  serialization errors, and syntax errors introduced by an automated script.

The work concluded with the implementation of the Binance API integration and the initiation of a new scan to test its effectiveness. The immediate focus is on validating this new data pipeline.
</analysis>

<product_requirements>
The goal is to build an AI agent, Crypto Oracle, that provides cryptocurrency trading recommendations. The system uses 21 diverse AI bots to analyze market data, identify trends, and generate predictions.

**Core Features:**
- **Analysis Engine:** 21 bots analyze historical crypto data (1-year lookback) to find trends.
- **Recommendations:** For each coin, bots provide a  or  recommendation, a Take Profit (TP) and Stop Loss (SL) price, and a 1-10 confidence score.
- **Top 5 Coins:** The agent aggregates results from all bots to identify the top 5 coins with the highest average confidence.
- **Data Display:** The UI must show the top 5 recommendations, including the coin's current price and the average predicted prices for 24h, 48h, and 7-day intervals, along with the aggregated TP/SL.
- **Scheduling:** Users can schedule scans to run at 6, 12, or 24-hour intervals.
- **Filtering:** Users can filter scans for all coins or only altcoins.
- **Integrations:** The system must send results to a user-provided email (via SMTP) and log results to a specified Google Sheet.
- **Data Accuracy:** The system must use up-to-date and accurate market data for all available coins from a reliable source (currently implemented with the Binance API).
</product_requirements>

<key_technical_concepts>
- **Backend:** FastAPI (Python)
- **Frontend:** React.js, Shadcn UI, Tailwind CSS
- **Database:** MongoDB (using  for async operations)
- **AI/LLM:** Claude 4.5 via Emergent LLM Key for data synthesis.
- **Data APIs:** The project evolved from using Coinalyze, to CoinGecko, and finally settled on the **Binance API** for reliable, real-time market data (coin lists, prices, and historical OHLCV).
- **Scheduling:**  for background tasks.
- **Email:** Standard Python  for SMTP integration.
</key_technical_concepts>

<code_architecture>
The application is a standard monorepo with a React frontend and a FastAPI backend.



- ****
  - **Importance:** The main entry point for the FastAPI application. It defines all API endpoints (, , etc.), manages the database connection, and initializes the background scheduler.
  - **Changes:** Heavily modified to add new endpoints, fix  serialization errors, and implement robust error handling for background scan tasks.

- ****
  - **Importance:** This is the core logic engine. It orchestrates the entire scan process: fetching coins, getting historical data, running each of the 21 bots, aggregating results, saving them to MongoDB, and triggering notifications.
  - **Changes:** This file has seen the most changes, pivoting data sources from Coinalyze to a CoinGecko/Binance hybrid, and finally to a pure Binance implementation to resolve data inaccuracy and rate-limiting issues. Error logging was also significantly enhanced here.

- ****
  - **Importance:** The current, definitive client for all market data. It interfaces with the public Binance API to fetch the list of all tradable symbols, their current ticker prices, and historical OHLCV (candlestick) data.
  - **Changes:** Created late in the project to solve data source reliability issues that plagued previous implementations (Coinalyze and CoinGecko).

- ****
  - **Importance:** Defines the logic for each of the 21 trading bots. Each bot class implements a different technical analysis strategy (e.g., RSI, MACD, Bollinger Bands) to generate predictions.
  - **Changes:** Initially created in bulk. Later, it was broken by a faulty automated script and had to be manually fixed. It was also updated to include logic for predicting future prices at 24h, 48h, and 7d intervals.

- ****
  - **Importance:** The main React component that renders the entire user interface, including the dashboard layout, navigation, and all data display components. It also handles state management and API calls to the backend.
  - **Changes:** Updated to reflect the rebranding to Crypto Oracle, fetch dynamic stats like , and integrate the . It was also fixed early on due to a JSX compilation error.

- ****
  - **Importance:** Contains the specialized React components for the dashboard, such as the  cards and the .
  - **Changes:** Updated to display the new data points requested by the user, including the current price and predicted 24h/48h/7d prices for each recommended coin.
</code_architecture>

<pending_tasks>
- Verify that the new Binance API integration successfully fetches a large list of coins and their historical data without errors.
- Confirm that the current price and historical data from Binance are accurate and up-to-date.
- Ensure the bot predictions and resulting Top 5 recommendations are sensible and displayed correctly in the UI with the new, accurate data.
- Confirm that the Coins Analyzed statistic updates dynamically to reflect the total number of coins processed from the Binance API after a scan completes.
</pending_tasks>

<current_work>
Immediately before this summary, the AI engineer was debugging a critical issue where the application was failing to fetch accurate, real-time crypto data for analysis. The initial Coinalyze API was unreliable, and a switch to the CoinGecko API resulted in severe rate-limiting errors (HTTP 429).

Following a discussion with the user, the decision was made to pivot entirely to the **Binance API**, which offers free, high-volume access to both coin lists and historical data.

The most recent actions were:
1.  Creating a new client  to handle all interactions with the Binance API.
2.  Refactoring the  to remove all dependencies on CoinGecko and use the new  for fetching the coin list, current prices, and historical OHLCV data.
3.  Restarting the backend server to apply these changes.
4.  Triggering a new scan via the  endpoint to test the end-to-end flow with the 100% Binance-powered data pipeline.

The system is currently in the middle of executing this first scan with the new Binance integration, and the next step is to monitor its progress and results.
</current_work>

<optional_next_step>
Monitor the backend logs to confirm that the scan initiated with the Binance API integration is fetching a large number of coins and processing them without hitting rate limits or other errors.
</optional_next_step>
