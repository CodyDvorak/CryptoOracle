<analysis>
The trajectory details the evolution of the Crypto Oracle application, a full-stack AI trading recommendation tool. The development process began by resolving two critical user-reported bugs: a faulty frontend auto-refresh mechanism and a failing backend email notification system. These were addressed by correcting authentication headers in frontend API calls and refining the notification logic in the backend.

Following the bug fixes, the project underwent a massive feature expansion phase driven by user requests. The analytical core was upgraded by increasing the number of trading bots from 21 to 49 and integrating a triple-layer OpenAI (GPT-5) architecture for sentiment analysis, deep coin analysis, and result synthesis. This enhancement introduced significant performance overhead, leading to prolonged scan times.

To address the performance degradation, a Smart Scan optimization was implemented, which prioritized analysis and selectively applied the time-intensive AI sentiment layer. Further user feedback led to the development of a multi-tiered scanning system, offering users five distinct scan types with varying speed, depth, and coin counts. This required a major refactoring of the backend scan orchestrator and a complete overhaul of the frontend UI to replace a single scan button with a dynamic dropdown menu. The final interactions involved adding even more scan types, adjusting coin limits, and beginning the implementation of a scheduler update and an all coins scan option.
</analysis>

<product_requirements>
The Crypto Oracle is a personalized, AI-powered agent designed to provide users with actionable cryptocurrency trading recommendations.

**Core User-Facing Features:**
*   **Authentication:** Users must register and log in to access the application. All data is user-specific.
*   **Multi-Tiered Scanning:** Users can choose from several scan types with different performance profiles, from a Quick Scan to a comprehensive Full Scan, each with clear descriptions of what they do.
*   **AI-Powered Analysis:** The system uses 49 unique AI bots and an integrated OpenAI GPT-5 model to analyze market data from the CryptoCompare API.
*   **Categorized Results:** After a scan, the app displays the top 5 coins in categories like highest confidence and biggest movers.
*   **Leverage & Timer:** The UI includes bot-driven leverage recommendations and a real-time timer to track the duration of ongoing scans.
*   **Automated Notifications:** The system must email a summary of results to the user's registered email after each scan.
*   **Scan Scheduling & History:** Users can schedule scans to run at intervals and review past scan results on a dedicated history page. The scheduler should allow selecting the desired scan type.
</product_requirements>

<key_technical_concepts>
- **Backend:** Python (FastAPI), Motor (async MongoDB), APScheduler (scheduling), asyncio (parallel processing).
- **Frontend:** JavaScript (React), React Context (auth state), Axios (API calls), TailwindCSS.
- **Database:** MongoDB for user, scan, and recommendation data.
- **Authentication:** JWT for securing API endpoints.
- **APIs:** CryptoCompare for market data,  for OpenAI GPT-5 access, SMTP for email.
</key_technical_concepts>

<code_architecture>
The application is a monorepo with a React frontend and a FastAPI backend.



-   ****
    -   **Importance:** This is the application's core engine. It manages the entire scan lifecycle, from data fetching and filtering to bot execution and result aggregation.
    -   **Summary of Changes:** This file has been massively refactored. It was modified to handle multiple, distinct  strategies (e.g., , ), each with different parameters for coin count, bot usage, and AI sentiment analysis. Crucially, it was updated to use  to run coin analysis in parallel for faster scan types, significantly improving performance. It also integrates the new .

-   ****
    -   **Importance:** The main and only significant frontend component, serving as the entire user dashboard. It manages all UI state, user interactions, and API communication.
    -   **Summary of Changes:** The UI was transformed from having a single Run Scan button to a dynamic dropdown menu with tooltips for seven different scan types. State management was added for a real-time scan timer (, ). The initial auto-refresh bug was fixed by ensuring the user's auth token was passed in API headers. Error handling for concurrent scans was also improved to provide clearer user feedback.

-   ****
    -   **Importance:** Defines the logic for all individual trading analysis bots.
    -   **Summary of Changes:** The number of bots was expanded from 21 to 49, adding 28 new strategies. A special  was added, which integrates with OpenAI to provide an LLM-based analysis.

-   ****
    -   **Importance:** Defines all Pydantic models for API request/response validation and database schemas.
    -   **Summary of Changes:** The  model was updated to include the new  field, allowing the frontend to specify which scan to run. New  enum values were added as more scan options were created. The  and  models were updated to include a  field.

-   ****
    -   **Importance:** Calculates all technical indicators (e.g., SMA, RSI, MACD) used by the bots.
    -   **Summary of Changes:** This file was updated to calculate several new indicators (e.g., SMA_200, ADX, EMA_12, EMA_26) that were required by the newly added bot strategies, ensuring all 49 bots could function correctly.

</code_architecture>

<pending_tasks>
- Add a dropdown selector to the scheduler UI to allow users to select the scan type for scheduled runs.
- Implement the backend logic to save and execute the chosen scan type for scheduled jobs.
- Add a new scan type named All In (or similar) that scans all 86 available coins from the API.
- Ensure email notifications for scheduled scans are working reliably.
</pending_tasks>

<current_work>
Immediately before this summary, the AI engineer was implementing a multi-part user request to enhance the scanning functionality.

The user asked to:
1.  Increase the coin limits for existing scan types.
2.  Add a new option to scan ALL available coins (86).
3.  Add a dropdown selector to the scheduler to choose the scan type for automated runs.

The engineer had just completed the backend work for the first two items. The  file was modified to update the coin limits for existing scan types like Full Scan and Quick Scan. A new scan strategy method, , was added to handle the scan all coins request.

The last action was editing  to add this new method. The next logical steps would be to add this new scan type to the  enum, update  to recognize it, and then begin the frontend work for the new scan button and the scheduler UI update.
</current_work>

<optional_next_step>
I will add the new scan types, including the All In option, to the  enum in  to ensure the backend API can validate and recognize them.
</optional_next_step>
