<analysis>
The trajectory documents the iterative development and significant pivoting of a full-stack application, Crypto Oracle, designed to provide AI-driven cryptocurrency trading recommendations. The process began with debugging a non-functional data pipeline. The initial Binance API integration failed due to geographic restrictions, forcing a pivot to CoinGecko, which was then abandoned due to rate-limiting. A stable data source was found with the CryptoCompare API.

Following this, development entered a rapid, feature-driven cycle based on user requests. Key features added include customizable price filters (min/max), enhanced scheduling with custom start times and timezones, and UI improvements like decimal precision adjustments and ticker symbol displays.

A major strategic shift occurred with the integration of the TokenMetrics API, per the user's request, to leverage its built-in AI grades. This introduced new complexities, as the free API key had limited access to historical data. To solve this, the AI engineer implemented a smart pre-filtering mechanism, prioritizing coins with high AI grades and creating a fallback analysis method for coins without full data.

The final phase focused on UI refinement and advanced features, including tabbed views for different Top 5 recommendation categories (confidence, percentage movers, dollar volume), a Custom Scan feature, and displaying detailed AI grades. The work concluded with the engineer about to address the user's latest requests: making confidence scores and percentages fully dynamic and implementing a pop-up to show individual bot breakdowns for each recommendation.
</analysis>

<product_requirements>
The objective is to build Crypto Oracle, an AI-powered agent that analyzes the cryptocurrency market and provides actionable trading recommendations.

**Core Functionality:**
-   **Analysis Engine:** Utilizes 21 AI bots and external AI signals (from TokenMetrics) to analyze market data for a wide range of cryptocurrencies.
-   **Categorized Recommendations:** Identifies and displays the top 5 coins in three distinct categories:
    1.  Highest average confidence score.
    2.  Biggest predicted movers by percentage.
    3.  Biggest predicted movers by dollar volume.
-   **Detailed Insights:** Each recommendation includes the coin's name/ticker, current price, predicted prices (24h, 48h, 7d), a / signal, average Take Profit (TP) and Stop Loss (SL) points, confidence score, and AI-driven insights like Trader and Investor Grades from TokenMetrics.
-   **Customizable Scans:** Users can run on-demand scans with specific filters, including a scope (all vs. altcoins) and a price range (minimum and maximum price).
-   **Advanced Scheduling:** Users can configure automated scans to run at set intervals (6, 12, 24 hours) with specific filter criteria, custom start times, and timezone settings.
-   **Data Source:** The system leverages the TokenMetrics API as its primary source for coin lists, real-time prices, and AI-driven analytics, with a smart fallback for coins with limited data.
</product_requirements>

<key_technical_concepts>
- **Backend:** Python with FastAPI for the web server and API.
- **Frontend:** JavaScript with React, using Shadcn UI components and Tailwind CSS for styling.
- **Database:** MongoDB, accessed asynchronously using the  library.
- **External APIs:** The application evolved from using Binance and CoinGecko to primarily relying on CryptoCompare, and finally, the **TokenMetrics API** for market data and AI grades.
- **Scheduling:**  is used for running background scan tasks at user-defined intervals.
- **AI/LLM:** Claude is used for synthesizing data and generating rationales.
</key_technical_concepts>

<code_architecture>
The application follows a monorepo structure with a distinct separation between the frontend and backend services.



-   ****
    -   **Importance:** The main entry point for the FastAPI application. It defines all API endpoints, manages application lifecycle (startup/shutdown), initializes the , and configures the scheduler.
    -   **Changes:** Heavily modified to add and update endpoints for running scans (), getting status (), fetching categorized recommendations (), and managing schedule configurations (). It was updated to handle API keys and initialize different API clients as the project pivoted.

-   ****
    -   **Importance:** This is the application's core logic engine. It orchestrates the entire scan process: fetching tokens, applying filters, running analysis with bots and AI grades, calling the aggregation engine, and saving results.
    -   **Changes:** This file underwent the most significant refactoring. It was adapted to switch from Binance to CryptoCompare and finally to TokenMetrics. Logic for smart pre-filtering based on TokenMetrics' AI grades was added, along with a fallback  method to handle tokens with incomplete data. It was also updated to handle custom scan lists.

-   ****
    -   **Importance:** The current primary data source client. It handles all interactions with the TokenMetrics API to fetch a list of tokens, their market data, and AI grades.
    -   **Changes:** This file was created to replace the . It was debugged to handle API limitations (like a  of 100) and to parse the token data correctly.

-   ****
    -   **Importance:** Defines all Pydantic data models for API requests, responses, and database documents. This ensures data consistency and validation.
    -   **Changes:** Models like , , , and  were repeatedly updated to support new features, including min/max price filters, custom symbols for scans, timezone settings, and additional data fields like , , and .

-   ****
    -   **Importance:** The root component of the React application. It manages the primary state, orchestrates API calls, and renders the main layout, including the navigation, recommendation lists, and configuration sections.
    -   **Changes:** This file was extensively modified. State management was expanded to handle min/max price filters, schedule settings (timezone, start time), and categorized recommendations. The UI was refactored to use a tabbed interface for different Top 5 lists and to include a Saved Schedules management section.

-   ****
    -   **Importance:** Contains the  component, which is responsible for displaying a single recommendation card.
    -   **Changes:** Updated to display new data fields, including the coin's ticker, AI insights (Investor/Trader Grades), and to format prices and percentages to the user-requested decimal precision (8 for prices, 4 for percentages).
</code_architecture>

<pending_tasks>
- **Bot Details Popup:** Implement a feature where clicking a recommendation card opens a popup showing the confidence score from each of the 21 individual bots for that coin.
- **Dynamic Confidence Score:** Ensure the main confidence score displayed is a true dynamic average of all bot results for a given coin, not a static or fallback value.
- **Dynamic Percentages:** Fix the percentage change predictions in the AI-only analysis fallback to be dynamic and variable, not static values.
- **Custom Scan UI:** Complete the frontend implementation for the Custom Scan feature.
</pending_tasks>

<current_work>
The AI engineer was actively addressing several user-reported issues and feature requests from the last message. The most recent actions were focused on both the backend and frontend to enhance data accuracy and add new functionality.

**Backend Fixes (Completed):**
1.  **Dynamic Percentages:** The  method in  was updated to add random variance to the predicted price changes, TP, and SL percentages, so they are no longer static.
2.  **Custom Scan Logic:** The  endpoint in  and the main  method in  were modified to accept and process a list of , allowing users to scan a pre-selected group of coins.

**Frontend Fixes (Completed):**
1.  **Price Precision:** The price display format in  was updated from  to  to show 8 decimal places.

**Current Task (In Progress):**
Immediately before this summary, the engineer acknowledged the user's request for a popup showing individual bot confidence scores. The very last action taken was to begin the implementation by outlining the first step: creating a new backend API endpoint to serve this detailed bot data. This is the first sub-task of the user's latest request.
</current_work>

<optional_next_step>
Create the new backend API endpoint () that retrieves and returns the individual bot results for a specific coin from a completed scan.
</optional_next_step>
