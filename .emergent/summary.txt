<analysis>
The trajectory details the evolution of the Crypto Oracle application, progressing from initial adaptive intelligence features to critical stability and accuracy improvements. Key areas addressed include implementing a robust multi-provider data sourcing system to overcome API rate limits, resolving performance bottlenecks by optimizing asynchronous scan operations and adding a notification system, and enhancing bot accuracy through market regime classification, contrarian strategies, and multi-timeframe analysis. Throughout this, the AI engineer diligently addressed user feedback, debugged API key issues, rectified JSON serialization errors, and improved bot performance evaluation, ensuring the application became more resilient, responsive, and intelligent.
</analysis>

<product_requirements>
The Crypto Oracle is an AI-powered crypto trading recommendation agent. Its core functionality includes secure user authentication and multi-API data sourcing for OHLCV (CoinMarketCap, CoinGecko) and futures/derivatives (OKX, Coinalyze) data with automatic failover for resilience. An advanced scanning engine, utilizing 49 trading bots, runs non-blocking background tasks with timeout protection. The application features a comprehensive bot performance and analytics dashboard, displaying system health, market regime performance, and data readiness indicators. Recent updates focused on improving the system's resilience and user experience, fixing UI freezing during scans, implementing a notification system for scan status, rectifying invalid API keys, and enhancing bot prediction accuracy through market regime classification, contrarian strategies, and multi-timeframe analysis.
</product_requirements>

<key_technical_concepts>
- **Backend:** FastAPI, , Motor (MongoDB), Pydantic.
- **Frontend:** React, React Context, Axios.
- **Architecture:** Multi-Provider Fallback, Non-Blocking Tasks (), Scan Monitoring, Market Regime Classification, Multi-Timeframe Analysis, Bot Strategies (AI, contrarian, trend-following).
</key_technical_concepts>

<code_architecture>
The application is a monorepo with a React frontend and a FastAPI backend.

- ****: The core logic orchestrating coin analysis and bot execution. Refactored to use  and . A crucial  was added to prevent event loop blocking. Modified to filter  for quick scans, and to incorporate market regime and multi-timeframe analysis for bot weighting.
- ** & **: New files for resilient data fetching with failover.
- ****: Main API server. Updated with , , health check endpoints, and new lightweight scan status ().  endpoint was sanitized for JSON errors.
- ****: UI for analytics. Overhauled to fetch from new analytics endpoints. Modified to check scan status before loading, preventing UI freezes, and later updated to reflect partial wins and bot counts dynamically.
- ****: Frontend entry point. Added logic for last scan time, timezone fix. Integrated  and . Updated  for notifications. Also updated scan type tooltips.
- ****: New file to manage global notification state.
- ****: New component for displaying notifications.
- ****: Client for CoinMarketCap data. Modified to add support for fetching 4-hour candles.
- ****: Computes technical indicators. Modified to support 4-hour timeframe indicators.
- ****: Added analytics models. Modified  model to include  and  and  for dynamic display.
- ****: Enhanced analytics. Added  to bot metrics and improved evaluation logic to include time-based outcomes.
- ****: Contains bot logic. New contrarian bots added, and safety checks for NaN/Infinity were implemented across various bots.  base class updated with .
- ****: New file to classify market conditions (BULL/BEAR/SIDEWAYS).
- ****: Updated to show dynamic bot counts, partial wins, and market regime badges on recommendation cards.
- ****: Updated to show dynamic bot counts in bot details.
- ****: Wrapped  component with .
</code_architecture>

<pending_tasks>
- **Implement True Adaptive Intelligence:** The original goal of implementing parameter optimization or reinforcement learning for the bots is still pending.
- **Phase 6 - Hybrid 1 Aggregation:**
    - Regime-aware bot weighting.
    - Confidence gating (predictions with confidence â‰¥ 6).
    - Strong consensus tier (80%+ agreement = boost confidence).
    - Contrarian agreement amplification.
    - Add 3-5 high-quality specialized bots.
    - Fine-tune regime weight multipliers.
</pending_tasks>

<current_work>
Immediately prior to this summary, the AI engineer was implementing **Phase 4: Multi-Timeframe Analysis**. This involved adding support for 4-hour candle data to enhance bot predictions. The  was updated to include a method for fetching 4-hour candles. The  was extended with a new method  to calculate indicators for the 4-hour timeframe. Subsequently,  was modified to fetch and process this 4-hour data and apply a timeframe confidence modifier to bot predictions. During testing, it was discovered that CoinMarketCap's 4h endpoint requires an enterprise plan, leading to the next immediate step of adding a fallback mechanism to CoinGecko for 4h candle data.
</current_work>

<optional_next_step>
Implement a fallback to CoinGecko for 4-hour candle data fetching in .
</optional_next_step>
